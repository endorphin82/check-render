{"version":3,"sources":["reducer/red1.js","reducer/red2.js","reducer/red3.js","reducer/index.js","ac/types.js","comopnents/comp1.js","ac/index.js","comopnents/comp2.js","comopnents/comp3.js","App.js","serviceWorker.js","index.js"],"names":["initialState","count1","count2","count3","combineReducers","red1","state","action","type","red2","red3","connect","Inc1","console","log","onClick","Inc2","Inc3","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kQAEMA,EAAe,CACnBC,OAAQ,GCDJD,EAAe,CACnBE,OAAQ,GCDJF,EAAe,CACnBG,OAAQ,GCEKC,cAAgB,CAC7BC,KHAa,WAAmC,IAAlCC,EAAiC,uDAAzBN,EAAcO,EAAW,uCAC/C,OAAQA,EAAOC,MACb,IIRiB,QJSf,OAAO,eACFF,EADL,CAEEL,OAAQK,EAAML,OAAS,IAE3B,QACE,OAAOK,IGPXG,KFDa,WAAmC,IAAlCH,EAAiC,uDAAzBN,EAAcO,EAAW,uCAC/C,OAAQA,EAAOC,MACb,IGPiB,QHQf,OAAO,eACFF,EADL,CAEEJ,OAAQI,EAAMJ,OAAS,IAE3B,QACE,OAAOI,IENXI,KDFa,WAAmC,IAAlCJ,EAAiC,uDAAzBN,EAAcO,EAAW,uCAC/C,OAAQA,EAAOC,MACb,IENiB,QFOf,OAAO,eACFF,EADL,CAEEH,OAAQG,EAAMH,OAAS,IAE3B,QACE,OAAOG,M,OGIEK,eACb,SAAAL,GAAK,MAAK,CACRL,OAAQK,EAAMD,KAAKJ,UAErB,CAACW,KCpBiB,iBAAO,CACzBJ,KFHmB,WCkBNG,EAdD,SAAC,GAAoB,IAAnBV,EAAkB,EAAlBA,OAAQW,EAAU,EAAVA,KAItB,OACE,oCACE,qCAAWX,GACVY,QAAQC,IAAI,UAEb,4BAAQC,QARQ,WAClBH,MAOE,SEKSD,eACb,SAAAL,GAAK,MAAK,CACRL,OAAQK,EAAMD,KAAKJ,OACnBC,OAAQI,EAAMG,KAAKP,UAErB,CAACc,KDlBiB,iBAAO,CACzBR,KFLmB,WGiBNG,EAdD,SAAC,GAA4B,IAA3BV,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,OAAQc,EAAU,EAAVA,KAI9B,OACE,oCACE,uDAAsBf,EAAtB,oBAAwCC,IACvCW,QAAQC,IAAI,UAEb,4BAAQC,QARQ,WAClBC,MAOE,SCKSL,eACb,SAAAL,GAAK,MAAK,CACRL,OAAQK,EAAMD,KAAKJ,OACnBC,OAAQI,EAAMG,KAAKP,OACnBC,OAAQG,EAAMI,KAAKP,UAErB,CAACc,KFhBiB,iBAAO,CACzBT,KFPmB,WIgBNG,EAdD,SAAC,GAAoC,IAAnCV,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,OAAQc,EAAU,EAAVA,KAItC,OACE,oCACE,uDAAsBf,EAAtB,oBAAwCC,EAAxC,MACCU,QAAQC,IAAI,eAAgBb,EAAQ,4PAErC,4BAAQc,QARQ,WAClBE,MAOE,SCKAC,G,OANc,kBAAXC,QACPA,OAAOC,qCACLD,OAAOC,qCAAqC,IAEvCC,QAIHC,EAAQC,YAAYC,EAAS,GAAIN,GAkBxBO,MAhBf,WACE,OACF,kBAAC,IAAD,CAAUH,MAAOA,GAEb,yBAAKI,UAAU,OACb,4BAAQA,UAAU,cAChB,4CACD,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,UCnBaC,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.4a1a187f.chunk.js","sourcesContent":["import {INC_1} from \"../ac/types\";\n\nconst initialState = {\n  count1: 0\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case INC_1:\n      return {\n        ...state,\n        count1: state.count1 + 1\n      }\n    default:\n      return state\n  }\n}","import {INC_2} from \"../ac/types\";\n\nconst initialState = {\n  count2: 0\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case INC_2:\n      return {\n        ...state,\n        count2: state.count2 + 1\n      }\n    default:\n      return state\n  }\n}","import {INC_3} from \"../ac/types\";\n\nconst initialState = {\n  count3: 0\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case INC_3:\n      return {\n        ...state,\n        count3: state.count3 + 1\n      }\n    default:\n      return state\n  }\n}","import {combineReducers} from \"redux\";\nimport red1 from \"./red1\"\nimport red2 from \"./red2\"\nimport red3 from \"./red3\"\n\nexport default combineReducers({\n  red1,\n  red2,\n  red3\n})","export const INC_1 = \"INC_1\"\nexport const INC_2 = \"INC_2\"\nexport const INC_3 = \"INC_3\"","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {Inc1} from \"../ac\";\n\nconst Comp1 = ({count1, Inc1}) => {\n  const handleClick = () => {\n    Inc1();\n  }\n  return (\n    <>\n      <h1>Comp1 {count1}</h1>\n      {console.log(\"Comp1 \")}\n\n      <button onClick={handleClick}>+</button>\n    </>\n  );\n};\n\nexport default connect(\n  state => ({\n    count1: state.red1.count1\n  }),\n  {Inc1}\n\n)(Comp1);","import {INC_1, INC_2, INC_3,} from \"./types\";\n\nexport const Inc1 = () => ({\n  type: INC_1\n})\nexport const Inc2 = () => ({\n  type: INC_2\n})\nexport const Inc3 = () => ({\n  type: INC_3\n})","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {Inc2} from \"../ac\";\n\nconst Comp2 = ({count1, count2, Inc2}) => {\n  const handleClick = () => {\n    Inc2();\n  }\n  return (\n    <>\n      <h1>Comp2 {`count1: ${count1} count2: ${count2}`}</h1>\n      {console.log(\"Comp2 \")}\n\n      <button onClick={handleClick}>+</button>\n    </>\n  );\n};\n\nexport default connect(\n  state => ({\n    count1: state.red1.count1,\n    count2: state.red2.count2\n  }),\n  {Inc2}\n\n)(Comp2);","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {Inc3} from \"../ac\";\n\nconst Comp3 = ({count1, count2, count3, Inc3}) => {\n  const handleClick = () => {\n    Inc3();\n  }\n  return (\n    <>\n      <h1>Comp3 {`count2: ${count2} count3: ${count3} `}</h1>\n      {console.log(\"Comp3 count1\", count1, \"не рендерится Comp3 при click Comp1, потому что это виртуал дом\")}\n\n      <button onClick={handleClick}>+</button>\n    </>\n  );\n};\n\nexport default connect(\n  state => ({\n    count1: state.red1.count1,\n    count2: state.red2.count2,\n    count3: state.red3.count3\n  }),\n  {Inc3}\n\n)(Comp3);","import { createStore, compose } from \"redux\";\nimport reducer from \"./reducer\";\n\nimport React from 'react';\n\nimport Comp1 from \"./comopnents/comp1\";\nimport Comp2 from \"./comopnents/comp2\";\nimport Comp3 from \"./comopnents/comp3\";\nimport './App.css';\nimport {Provider} from \"react-redux\";\n\nconst composeEnhancers =\n  typeof window === \"object\" &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n    }) : compose;\n\nconst enhancer = composeEnhancers();\n\nconst store = createStore(reducer, {}, enhancer);\n\nfunction App() {\n  return (\n<Provider store={store}>\n\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h3>open console</h3>\n       <Comp1/>\n       <Comp2/>\n       <Comp3/>\n      </header>\n    </div>\n</Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}